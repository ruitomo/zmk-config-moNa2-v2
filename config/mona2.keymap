#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        tabright {
            bindings = <&kp LC(TAB)>;
            key-positions = <12 13>;
        };

        tableft {
            bindings = <&kp LS(LC(TAB))>;
            key-positions = <12 11>;
        };

        exclamationmark {
            bindings = <&kp EXCLAMATION>;
            key-positions = <4 3>;
        };

        command {
            bindings = <&kp TAB>;
            key-positions = <24 25>;
        };

        screenshot {
            bindings = <&kp LS(LG(NUMBER_4))>;
            key-positions = <23 24>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <8 7>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <19 18>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E             &kp R     &kp T                                           &kp Y             &kp U  &kp I     &kp O     &kp P
&kp A             &kp S         &kp D             &kp F     &kp G        &trans              &kp MINUS      &kp H             &kp J  &kp K     &kp L     &kp ENTER
&mt LEFT_SHIFT Z  &kp X         &kp C             &kp V     &kp B        &lt 4 COMMA         &kp PERIOD     &kp N             &kp M  &mkp MB2  &mkp MB2  &kp MINUS
&kp LCTRL         &kp LEFT_ALT  &kp LEFT_COMMAND  &mkp MB1  &lt 3 SPACE  &lt 2 LANGUAGE_2    &kp BACKSPACE  &lt 1 LANGUAGE_1                             &kp QUESTION
            >;

            sensor-bindings =
                <&scroll_up_down>,
                <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        symbol_layer {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN    &kp HASH        &kp DOLLAR     &kp PERCENT                                   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE          &kp EQUAL  &kp ASTERISK
&kp CARET        &kp ASTERISK   &kp PERIOD      &kp MINUS      &kp TILDE         &trans    &kp LEFT_BRACE    &kp RIGHT_BRACE       &kp COLON              &kp DOUBLE_QUOTES  &kp PIPE   &kp PIPE
&trans           &kp AMPERSAND  &kp UNDERSCORE  &kp LESS_THAN  &kp GREATER_THAN  &trans    &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp SEMICOLON          &kp SINGLE_QUOTE   &kp SLASH  &kp BACKSLASH
&trans           &trans         &trans          &trans         &trans            &trans    &trans            &trans                                                                     &trans
            >;

            sensor-bindings =
                <&scroll_up_down>,
                <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
        };

        num_layer {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4  &kp F5                          &kp EQUAL   &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
&kp F6   &kp F7   &kp F8  &kp F9  &kp F10  &trans    &trans       &kp PERIOD  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS
&kp F11  &kp F12  &trans  &trans  &trans   &trans    &kp PERCENT  &kp SLASH   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS
&trans   &trans   &trans  &trans  &trans   &trans    &trans       &trans                                                &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        arrow_layer {
            bindings = <
&kp LS(LG(Z))  &kp LG(Z)      &kp LG(S)             &kp LG(A)         &trans                            &trans     &kp LC(U)       &kp UP_ARROW    &kp LC(W)        &trans
&kp LG(X)      &kp LG(C)      &kp LG(V)             &kp LG(LS(V))     &kp LS(LG(B))   &trans    &trans  &kp LC(R)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LG(ENTER)
&trans         &kp LG(LA(F))  &kp LA(LEFT_COMMAND)  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans    &trans  &trans     &kp LC(A)       &trans          &kp LC(E)        &trans
&trans         &trans         &trans                &trans            &trans          &trans    &trans  &trans                                                      &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        connect_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans                         &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bootloader  &trans         &trans         &trans         &trans         &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans                                                      &bt BT_CLR_ALL
            >;

            sensor-bindings = <&scroll_up_down>;
        };
    };
};
